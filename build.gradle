buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'

    }
}
plugins {
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id 'java'
}



apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

jar {
    baseName = 'gs-accessing-facebook'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/libs-milestone" }

}

group = 'pl.tomekreda.library'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8




dependencies {
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.7.Final'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.3.7.Final'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-security')
    compile group: 'org.springframework.session', name: 'spring-session-jdbc', version: '2.0.4.RELEASE'
    compile group: 'org.springframework.session', name: 'spring-session-core', version: '2.0.4.RELEASE'
    runtimeOnly('com.h2database:h2')
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.4'
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
}

def webappDir = "$projectDir/src/main/webapp"
def execTempDir = "./src/main/resources/static/"

bootWar {
    dependsOn "buildAngular"
}

bootJar {
    dependsOn "buildAngular"
}

task buildAngular(type: Exec) {
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build", "--prod"
    } else {
        commandLine "ng", "build", "--prod"
    }
    dependsOn "copyAngular"
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task copyAngular(type: Copy) {
    dependsOn "cleanTempDir"
    from "${webappDir}/dist/webapp"
    into "src/main/resources/static"
}

task cleanTempDir(type: Delete) {
    project.delete(execTempDir)
    project.file(execTempDir).mkdirs()
}

